// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/rands/rands.go

// Package mock_rands is a generated GoMock package.
package mock_rands

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRandoms is a mock of Randoms interface.
type MockRandoms struct {
	ctrl     *gomock.Controller
	recorder *MockRandomsMockRecorder
}

// MockRandomsMockRecorder is the mock recorder for MockRandoms.
type MockRandomsMockRecorder struct {
	mock *MockRandoms
}

// NewMockRandoms creates a new mock instance.
func NewMockRandoms(ctrl *gomock.Controller) *MockRandoms {
	mock := &MockRandoms{ctrl: ctrl}
	mock.recorder = &MockRandomsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandoms) EXPECT() *MockRandomsMockRecorder {
	return m.recorder
}

// String mocks base method.
func (m *MockRandoms) String(n int, charSet string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String", n, charSet)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// String indicates an expected call of String.
func (mr *MockRandomsMockRecorder) String(n, charSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockRandoms)(nil).String), n, charSet)
}
