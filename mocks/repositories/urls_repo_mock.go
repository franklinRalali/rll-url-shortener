// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/urls_contract_repo.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	entity "github.com/ralali/rll-url-shortener/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockURLs is a mock of URLs interface.
type MockURLs struct {
	ctrl     *gomock.Controller
	recorder *MockURLsMockRecorder
}

// MockURLsMockRecorder is the mock recorder for MockURLs.
type MockURLsMockRecorder struct {
	mock *MockURLs
}

// NewMockURLs creates a new mock instance.
func NewMockURLs(ctrl *gomock.Controller) *MockURLs {
	mock := &MockURLs{ctrl: ctrl}
	mock.recorder = &MockURLsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLs) EXPECT() *MockURLsMockRecorder {
	return m.recorder
}

// AddVisitCountByShortCode mocks base method.
func (m *MockURLs) AddVisitCountByShortCode(ctx context.Context, shortCode string, count uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVisitCountByShortCode", ctx, shortCode, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVisitCountByShortCode indicates an expected call of AddVisitCountByShortCode.
func (mr *MockURLsMockRecorder) AddVisitCountByShortCode(ctx, shortCode, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVisitCountByShortCode", reflect.TypeOf((*MockURLs)(nil).AddVisitCountByShortCode), ctx, shortCode, count)
}

// DeleteByShortCode mocks base method.
func (m *MockURLs) DeleteByShortCode(ctx context.Context, shortCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByShortCode", ctx, shortCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByShortCode indicates an expected call of DeleteByShortCode.
func (mr *MockURLsMockRecorder) DeleteByShortCode(ctx, shortCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByShortCode", reflect.TypeOf((*MockURLs)(nil).DeleteByShortCode), ctx, shortCode)
}

// FindOneOriginURLByShortCode mocks base method.
func (m *MockURLs) FindOneOriginURLByShortCode(ctx context.Context, shortCode string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneOriginURLByShortCode", ctx, shortCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneOriginURLByShortCode indicates an expected call of FindOneOriginURLByShortCode.
func (mr *MockURLsMockRecorder) FindOneOriginURLByShortCode(ctx, shortCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneOriginURLByShortCode", reflect.TypeOf((*MockURLs)(nil).FindOneOriginURLByShortCode), ctx, shortCode)
}

// FindOneVisitCountByShortCode mocks base method.
func (m *MockURLs) FindOneVisitCountByShortCode(ctx context.Context, shortCode string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneVisitCountByShortCode", ctx, shortCode)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneVisitCountByShortCode indicates an expected call of FindOneVisitCountByShortCode.
func (mr *MockURLsMockRecorder) FindOneVisitCountByShortCode(ctx, shortCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneVisitCountByShortCode", reflect.TypeOf((*MockURLs)(nil).FindOneVisitCountByShortCode), ctx, shortCode)
}

// UpdateByShortCode mocks base method.
func (m *MockURLs) UpdateByShortCode(ctx context.Context, shortCode string, url entity.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByShortCode", ctx, shortCode, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByShortCode indicates an expected call of UpdateByShortCode.
func (mr *MockURLsMockRecorder) UpdateByShortCode(ctx, shortCode, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByShortCode", reflect.TypeOf((*MockURLs)(nil).UpdateByShortCode), ctx, shortCode, url)
}

// Upsert mocks base method.
func (m *MockURLs) Upsert(ctx context.Context, url entity.URL) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, url)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockURLsMockRecorder) Upsert(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockURLs)(nil).Upsert), ctx, url)
}
